<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQL on Tim Trice</title>
    <link>/sql/</link>
    <description>Recent content in SQL on Tim Trice</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/sql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Aggregation with MySQL</title>
      <link>/sql/basic-aggregation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sql/basic-aggregation/</guid>
      <description>Maximum Wind Minimum Pressure Count Cyclones per Year Average Wind Standard Deviation Sample Standard Deviation Variance Sample Variance Database Server Info MariaDB MySQL    Maximum Wind SELECT `Key`, MAX(`Wind`) AS MaxWind FROM `adv` GROUP BY `Key` ORDER BY `MaxWind` DESC LIMIT 0, 10;  Minimum Pressure SELECT `Key`, MIN(`Pressure`) AS MinPress FROM `adv` GROUP BY `Key` ORDER BY `MinPress` LIMIT 0, 10;  Count Cyclones per Year SELECT YEAR(`Date`) AS `Yr`, COUNT(DISTINCT(`Key`)) AS `n` FROM `adv` GROUP BY YEAR(`Date`) ORDER BY `n` DESC LIMIT 0, 10;  Average Wind SELECT `Key`, AVG(`Wind`) AS `AvgWind` FROM `adv` GROUP BY `Key` ORDER BY `AvgWind` DESC LIMIT 0, 10;  Standard Deviation \[\text{s} = \sqrt{\frac{1}{N}\sum_{i=1}^{N}\left( x_i - \mu \right)^2}\]</description>
    </item>
    
    <item>
      <title>Create A Database in MariaDB and MySQL</title>
      <link>/sql/create-database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sql/create-database/</guid>
      <description>Create A Database Show Warnings Show Databases Drop A Database Use Database Database Server Info MariaDB MySQL    Create A Database Creating a database is one of the simplest SQL statements. There are no parameters required other than the name of the database.
CREATE DATABASE `sakila`; I wrap sakila in backticks only for highlighting. While I would encourage everyone to do so for code legibility, MariaDB and MySQL do not require the use of backticks or single/double quotes.</description>
    </item>
    
    <item>
      <title>Create and Alter Tables in MariaDB and MySQL</title>
      <link>/sql/create-alter-tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sql/create-alter-tables/</guid>
      <description>Planning Create Tables Explain Tables Alter Tables Show Tables Database Server Info MariaDB MySQL    Planning Creating tables is significantly more complex than creating databases. There are several factors that we have to consider with our data.
 What variables must we maintain in the table?
 What are the data types of the variables?
 Are there any unique variables?
 Will we have any other tables that rely on our current table?</description>
    </item>
    
    <item>
      <title>Employees Database Optimization</title>
      <link>/sql/employees-database-optimization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sql/employees-database-optimization/</guid>
      <description> Database Server Info MariaDB MySQL    Database Server Info MariaDB  MySQL   </description>
    </item>
    
    <item>
      <title>Select Clause in MariaDB and MySQL</title>
      <link>/sql/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sql/select/</guid>
      <description>SELECT Database Server Info MariaDB MySQL    USE `sakila`; SELECT Format:
SELECT [WHAT] FROM [TABLE] (WHERE [CONDITIONS]) (LIMIT n); In the statement above anything within parentheses is optional.
Simple select statement with limit to first ten rows.
SELECT * FROM `actor` LIMIT 10;  Table 1: 10 records  actor_id first_name last_name last_update    1 PENELOPE GUINESS 2006-02-15 04:34:33  2 NICK WAHLBERG 2006-02-15 04:34:33  3 ED CHASE 2006-02-15 04:34:33  4 JENNIFER DAVIS 2006-02-15 04:34:33  5 JOHNNY LOLLOBRIGIDA 2006-02-15 04:34:33  6 BETTE NICHOLSON 2006-02-15 04:34:33  7 GRACE MOSTEL 2006-02-15 04:34:33  8 MATTHEW JOHANSSON 2006-02-15 04:34:33  9 JOE SWANK 2006-02-15 04:34:33  10 CHRISTIAN GABLE 2006-02-15 04:34:33     Select only actor_id, first_name and last_name.</description>
    </item>
    
    <item>
      <title>Combine Two Tables</title>
      <link>/sql/combine-two-tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sql/combine-two-tables/</guid>
      <description>Join two tables in a SQL database to create one table.
USE `employees`; Table A (employees) has a PRIMARY KEY emp_no.
EXPLAIN `employees`;  Table 1: 6 records  Field Type Null Key Default Extra    emp_no int(11) NO PRI NA   birth_date date NO  NA   first_name varchar(14) NO  NA   last_name varchar(16) NO  NA   gender enum(‘M’,‘F’) NO  NA   hire_date date NO  NA      Table B (titles) also has a PRIMARY KEY emp_no.</description>
    </item>
    
    <item>
      <title>Finding nth salaries</title>
      <link>/sql/find-nth-salaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sql/find-nth-salaries/</guid>
      <description>We are asked to find specific salary.salaries values within our employees database.
USE `employees`; Let’s find who has the highest salaries in our database.
SELECT * FROM `salaries` ORDER BY `salaries`.`salary` DESC LIMIT 0, 5;  Table 1: 5 records  emp_no salary from_date to_date    43624 158220 2002-03-22 9999-01-01  43624 157821 2001-03-22 2002-03-22  254466 156286 2001-08-04 9999-01-01  47978 155709 2002-07-14 9999-01-01  253939 155513 2002-04-11 9999-01-01     We notice in our query above we have multiple salaries per employee (see emp_no 43624).</description>
    </item>
    
    <item>
      <title>nth Highest Salary</title>
      <link>/sql/example-slug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sql/example-slug/</guid>
      <description>Problem LeetCode
Write a SQL query to get the \(\text{n}^\text{th}\) highest salary from the Employee table.
+----+--------+ | Id | Salary | +----+--------+ | 1 | 100 | | 2 | 200 | | 3 | 300 | +----+--------+ For example, given the above Employee table, the \(\text{n}^\text{th}\) highest salary where n = 2 is 200. If there is no \(\text{n}^\text{th}\) highest salary, then the query should return null.
+------------------------+ | getNthHighestSalary(2) | +------------------------+ | 200 | +------------------------+  Build Database CREATE DATABASE IF NOT EXISTS `Leet`; USE `Leet`; CREATE TABLE `Employee` ( `Id` TINYINT(1) UNSIGNED NOT NULL PRIMARY KEY, `Salary` SMALLINT(3) UNSIGNED ); INSERT INTO `Employee` VALUES (1, 100), (2, 200), (3, 300);  Analyze DELIMITER $$ CREATE FUNCTION n1(n INT) RETURNS INT BEGIN DECLARE x TINYINT(1); SET x = n - 1; RETURN ( -- Write your MySQL query statement below.</description>
    </item>
    
  </channel>
</rss>